services:
  # Serviciul de bază de date PostgreSQL
  db:
    image: postgres:16-alpine
    container_name: arhivare_db
    environment:
      POSTGRES_DB: arhivare
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      # Adaugă variabile pentru healthcheck
      PGUSER: app
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - app_net
    # FIXED: Enhanced healthcheck
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Serviciul Adminer pentru administrarea bazei de date
  adminer:
    image: adminer:4
    container_name: arhivare_adminer
    depends_on:
      db:
        condition: service_healthy  # FIXED: Wait for database to be healthy
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: db
    networks:
      - app_net
    restart: unless-stopped

  # Serviciul backend FastAPI
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: arhivare_api
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy  # FIXED: Wait for database to be healthy
        restart: true  # FIXED: Restart API if DB restarts
    ports:
      - "8000:8000"
    networks:
      - app_net
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    volumes:
      - .:/app  # Pentru hot reload în development
    # FIXED: Add healthcheck for API
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Serviciul frontend React (Optional - pentru când vrei să rulezi și frontend-ul)
  frontend:
    build:
      context: ./react-frontend
      dockerfile: Dockerfile.dev
    container_name: arhivare_frontend
    depends_on:
      api:
        condition: service_healthy  # FIXED: Wait for API to be healthy
    ports:
      - "3000:3000"
    networks:
      - app_net
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - CHOKIDAR_USEPOLLING=true  # Pentru hot reload în Docker
    volumes:
      - ./react-frontend:/app  # Pentru hot reload în development
      - /app/node_modules  # Păstrează node_modules din container
    restart: unless-stopped

volumes:
  pg_data:

networks:
  app_net:
    driver: bridge

